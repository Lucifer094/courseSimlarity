该课程设计为编译原理的后续课程, 主要训练学生综合运用所学的编译原理知识解决实际问题的能力。通过独立完成一个小型编译器的开发，使学生深入理解编译器的基本结构，掌握实现编译器中程序设计的基本方法和步骤，从而提高学生软件设计与开发的能力，增强学生对整体专业知识的综合运用能力。三、教学基本要求通过该课程的教学，使学生学习运用相关知识去设计、实现编译程序，培养学生的分析问题和解决问题的能力，为毕业设计及科学研究提供坚实的动手和实践能力。本课程设计的任务是用某高级语言作为宿主语言设计完成一个编译器，基本要求如下：（1） 完成代码分析的功能。包括词法分析、语法分析、语义分析等。（2） 完成编译器综合部分的功能，即代码生成。（3） 完成代码的优化。包括源代码优化、中间代码优化等。（4） 写出设计报告，明确已解决和尚未解决的问题，提出进一步完善的设想与建议。四、教学内容与学时分配针对某高级语言或高级语言的子集设计并实现一个小型的编译器，完成程序的词法分析、语法分析、语义分析以及代码生成和代码优化等功能。主要设计内容如下：801 设计词法分析器（16学时）确定词法格式及其表示方式，构造源代码中每种记号的有限自动机，完成表驱动的词法分析器的编程和调试调试，使该程序模块的输出为标准格式的词法分析结果。要求具有预处理功能，滤掉不需要翻译的字符串。2 设计语法分析器（18学时）可采用自顶向下或自底向上的分析方法进行语法分析，确定语法格式及相应算法的数据结构，编程实现对词法分析结果的语法分析，生成源程序段的语法树。要求解决文法中的二义性问题；能够对有语法错误的程序给出有意义的错误提示。3 符号表的设计（14学时）确定符号表的组织方式，确保其可以高效地完成插入、查找、删除操作。4 语义分析和中间代码生成（16学时）确定属性和属性文法，根据符号表内容以及语法树进行语义分析并生成源程序段的中间代码。5 代码优化（16学时）在语义分析阶段产生的抽象语法树上进行机器无关的代码优化。五、教学方法及手段本门课程采用学生动手实践方式来完成该教学环节的内容。通过开发某高级语言的小型编译器，使学生掌握相关的技术和方法，并积累实践开发经验。六、实验（或）上机内容开发一个某高级语言的编译器。七、前续课程、后续课程前续课程：编译原理、数据结构；后续课程：毕业设计。