（一）课程的性质、地位、作用和任务数据结构课程是计算机科学教育中的一门核心课程，是计算机各专业、信息专业和其他一些与计算机技术关系密切专业的必修的基础课程。它的任务是讨论现实世界中的各种逻辑结构、在计算机中的存储结构以及实现各种操作的算法问题，为今后进一步学习后续专业课程、进行软件开发和应用打好基础。（二）教学目的和要求数据结构是一门理论和实践紧密结合的基础课，其教学目标是让学生掌握数据的组织、存储、处理的基本方法，要求学生能熟练使用C++语言描述具体的数据结构问题和实现算法，掌握如何组织数据、如何存储数据和如何处理数据的基本方法，理解各种数据结构与算法，了解数据结构的在现实问题中的基本应用，为后续专业课学习打好基础。（三）课程教学方法与手段本课程应采用面授讲解为主、指导学生自学为辅的教学方法，利用多媒体教学手段，制作条理清晰的PPT投影和动态的算法跟踪动画，加强学生对算法的理解。（四）课程与其它课程的联系《数据结构》课程的先修课程是离散数学和C++程序设计，其中离散数学提供了算法的数学模型，C++是实现算法的工具。本课程是后续课程如操作系统、数据库原理、编译原理、计算机网络等专业课的基础，这些专业课中涉及的数据的组织和处理方法正是本课程的内容。（五）教材与教学参考书教材：严蔚敏，《数据结构》，清华大学出版社，2006年9月。教学参考书：1.2.3.SaraBaase,AllenVanGelder，《ComputerAlgorithmsintroductiontoDesignandAnalysis》(ThirdEdition)，高等教育出版社，2002年3月刘大有，《数据结构》，高等教育出版社，2005年7月朱站立，《数据结构——使用C++语言》，西安电子科技大学出版社，2007年9月二、课程的教学内容、重点和难点1、面向对象程序设计与C++语言简单复习C++语言的特点及基本操作C++函数：主要是函数参数和成员函数返回值；C++的类：构造函数、操作符重载、友元、派生、继承、结构体、模板；抽象类型的概念及其在类定义中的应用。重点与难点：模板和继承2、绪论和算法分析基础数据结构的概念、抽象数据类型的引入、算法及描述数据结构是指数据之间的关系；数据结构的三个方面：数据的逻辑结构、数据的物理结构、数据的运算抽象数据类型的描述方法及运用抽象数据类型的概念设计软件的过程理解Pro.NiklausWirth提出的著名公式：算法+数据结构=程序算法的五个特性：有穷性、确定性、可行性、输入、输出算法的描述：程序、伪码语言或框图等算法设计的要求：正确性、可读性、健壮性、可移植性等重点：建立数据结构和算法的概念算法分析基础算法的时间与空间的复杂度分析O(1),O(log2n),O(n),O(nlog2n),O(n2),O(n3),O(2n)……难点：时间复杂性分析方法3、顺序存储结构的线性表、堆栈、队列线性表的定义顺序存储结构的含义线性表的顺序（数组）存储：类定义、类实现：定位、插入、删除算法及其复杂度堆栈的定义：后进先出线性表(LastInFirstOut)堆栈的抽象数据类型的定义堆栈的实现，要求会写实现方法的类定义和类实现堆栈的应用：表达式求值、递归的实现（作一般了解）队列的定义：先进先出线性表(FirstInFirstOut)队列的抽象数据类型的定义队列的实现，要求会写实现方法的类定义和类实现队列的应用（图的先广查找、树的层次遍历等）循环数组实现的队列4、链式存储结构的线性表、堆栈、队列线性表的链式（指针）存储：单向链表、带表头的单向链表、循环链表、双向链表、双向循环链表等如何实现上述各种链表的初始化/插入/删除/输出？带表头的链表有什么优势？表翻转（逆置）的算法：顺序存储：只增加一个工作单元；链式存储：只增加一个指针，不增加工作单元；链式堆栈：链式堆栈类的设计和应用链式队列：链式队列类的设计和应用重点：链式堆栈和队列的类实现难点：顺序存储与链式存储的操作区别、线性表空/满的判断5、数组、字符串和集合类多维数组顺序存储的一般规则：最右下标变化最快某个元素的位置的计算；某个位置的元素的下标；特殊矩阵（二维数组）的压缩存储：对称矩阵：用三角矩阵存放；稀疏矩阵：三元组表示法、十字链表表示法。稀疏矩阵的三元组表示法的含义及两种转置算法定义串、子串串的两种存储方法(数组、链表)各有什么优缺点？串的基本操作：单串：输入、输出求长度大小写转换求子串串/串：复制合并（首尾连接、交叉合并两种）比较（字典顺序）插入子串删除子串串的置换（先删除、再插入）模式匹配：判别是否子串（返回真假、返回首位置、返回所有位置）整型集合C++语言本身没提供集合类型，学会定义集合类以及相关的集合操作重点：高维数组与一维数组的映射字符串的操作难点：数组的压缩存储及操作，串的模式匹配6、递归递归的定义：递归概念的引入：一个对象的组成包含了自身递归算法（程序）：一个算法（程序）直接或间接地调用自己。递归方式：直接递归间接递归递归的类型：定义是递归的，如裴波那契数列问题的解法是递归的，如折半查找递归的应用：顺序查找的递归算法折半查找的递归算法递归的实现递归分析：一个问题采用递归算法必须具备的3个条件设计递归算法的方法递归算法的优缺点分析：对比递归与非递归算法的可读性/效率如何消除递归理论基础：每一个递归程序都可以改写成相应的非递归程序必要性：有时非递归程序效率更高方法：具体不同的问题可以有不同的快捷方法消除递归的通用方法：使用堆栈模拟递归重点：建立递归思想难点：递归的消除7、树一般树：树的定义和基本术语树的先根和后根遍历树的结点类定义和实现，树的类定义和实现二叉树：二叉树的性质、存储结构、完全二叉树结点的编号二叉树的结点类定义和二叉树类定义及实现树、森林与二叉树之间的相互转换二叉树的先序、中序、后序遍历（非线性结构-->线性结构）线索树的概念、线索化的递归过程树的应用：HUFFMAN树的构造，HUFFMAN编码问题数据结构设计二叉排序树二元运算的表达式树树的其他问题：树的复制层次遍历（用队列）；左右孩子交换（递归方法）；求树的高度、结点个数、叶片数目等重点：二叉树的遍历、线索化、HUFFMAN树数据压缩方法难点：有关二叉树操作的递归方法8、图图的定义及基本术语（有向图、无向图、权、度、路径、回路、连通、生成树）图的存储结构与类定义（邻接矩阵、邻接链表、边的链表等）图的先深、先广遍历（非线性结构-->线性结构）、图的连通性计算有向图的拓扑排序AOV(Activeonvertex)图：点表示活动，有向边表示活动之间的先后关系。关键路径AOE(ActiveOnEdge)图：点表示状态，边表示活动。最短路径问题无权、正权、负权最短路径问题单源最短路径dijkstral算法每一对结点间的最短路径求法方法一：分别把每一结点作为源点，调用dijkstral算法方法二：floyed算法最小支撑树（最小生成树）的计算Prim算法：复杂度与点有关，适合于点少边多的图。Kruskal算法：复杂度与边有关，适合于点多边少的图。该算法的关键：图的存储结构（边权升序的链表）、连通性的判别；应用：可及性与Warshall算法连通分量的计算重点：图的存储方法、图的便历、图中结点的排序、图中边权的计算难点：Prim算法、dijkstral算法、floyed算法等9、排序什么是排序？什么是内部排序？什么是外部排序？如何评估各种排序算法的优劣？理解下列排序算法的思想：直接插入排序：数组的顺序比较插入排序O(n2)数组的折半比较插入排序O(n2)链表的插入排序O(n2)二叉排序树：按输入顺序建立二叉排序树，再进行中序遍历。O(nlog2n)交换排序：冒泡排序：O(n2)分划交换排序：O(nlog2n)选择排序：直接选择排序：O(n2)堆排序：O(nlog2n)合并排序：O(nlog2n)重点：理解不同排序算法的思想难点：各种排序算法的复杂度分析、适用情况10、查找线性表：无序：顺序查找：复杂度为O(n)有序：已排序：折半查找：复杂度为O(log2n)，适合于有序数据的查找已索引：分块查找：块内有序则用折半方法树：二叉查找树的概念、插入和查找的递归算法静态树与动态树数字查找树杂凑（即哈希表，构造哈希表也叫散列）什么是杂凑？什么是冲突？杂凑法的两个主要问题：杂凑函数的构造和冲突的解决；构造杂凑函数的两个原则：压缩性：这是杂凑法的根本目的散列性：使关键字的杂凑地址均匀分布，减少冲突构造杂凑函数的基本方法调节冲突的方法：开放地址法、链地址法等重点：对不同的数据存储结构选择不同的查找方法难点：杂凑法的适用范围、应用方法