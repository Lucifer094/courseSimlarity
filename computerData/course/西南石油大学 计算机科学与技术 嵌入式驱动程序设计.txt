时间：2016年3月本课程是一门综合运用操作系统、数据结构、算法等课程的基本概念和原理，分析和实现现代操作系统中的驱动程序的课程，是嵌入式专业的一门重要的专业课程。本课程的目的是通过讲解Linux设备驱动程序开发方法和技术，使得学生了解和掌握嵌入式中驱动程序的整个开发过程，具有基本的驱动程序的开发能力，并使得学生受到必要的基本驱动开发过程的训练，增强学生分析和解决工程实际问题的能力。三、基本要求1、课程支撑能力1）理解计算机硬件和软件系统交互的结构和工作机理，并能将原理运用于实际系统。2）理解程序运行机制，掌握问题求解、系统设计以及算法与程序设计的基本方法，能运用于复杂软件系统的分析、设计与实现。3）能针对特定需求完成计算机软件系统或模块的设计与实现。4）能够从系统的角度权衡复杂计算问题所涉及的相关因素，提出解决方案，完成系统设计、实现，并通过测试或实验分析其有效性。2、课程教学目标1）掌握Linux驱动程序（内核程序）的原理，通过学习学生能够将操作系统、数据结构及算法、嵌入式体系结构及原理中的相关知识进行综合，并能运用到简单驱动程序实践中。2）掌握Linux字符驱动程序和块驱动程序开发的基本方法和过程，包含驱动程序调试的基本方法，能够针对特定的简单硬件给出驱动程序的设计和实现。3）了解Linux驱动程序中的一些特殊系统实现方式，并与普通的应用软件程序的实现方法进行对比，进一步加强学生对系统级应用软件和系统工作原理的理解。3、达成途径1）通过分析实际驱动源代码中包含的数据结构及算法，使得学生掌握Linux操作系统内部的实现机制和原理。2）通过具体的Linux内核函数的讲解和应用，进一步理解操作系统的相关原理的具体实现方法。3）通过简单的硬件环境的不同类型的驱动程序的实现，掌握驱动程序的开发基本过程。4）通过两个完整的简单驱动程序的设计与实现，使得学生具有基本驱动程序开发的能力。四、教学内容、要求及学时分配（一）理论教学(28学时)396（按层次结构列出知识点条目及知识点的简要说明，知识点的教学要求，重点、难点，教学方法（探究式、启发式、讨论式等）及手段，教学时数及所用时间等。第1章设备驱动程序简介（2学时）目的与要求：掌握Linux驱动程序的基本概念、作用及内核功能划分，了解设备驱动程序的安全问题和版本编号对驱动编写的影响，掌握许可证条款对一个有效驱动程序的作用。难点与重点：驱动程序的作用，内核与驱动的关系，内核功能的划分。教学建议：通过系统的层次关系阐述清楚内核和驱动程序之间的关系，通过相关实例说明驱动程序的安全问题、版本问题及许可证条款对驱动程序的影响。1.1设备驱动程序的作用1.2内核功能划分1.3设备和模块的分类1.4安全问题1.5版本编号与许可证条款【重点】：驱动程序的作用，内核的模块划分【难点】：驱动和内核模块的关系，Linux内核的层次结构第2章构造和运行模块（2学时）目的与要求：掌握一个简单的类似于HelloWorld的简单驱动程序的构成及实现过程，掌握内核符号表，掌握模块参数。难点与重点：驱动程序的基本结构，内核符号表的作用，用户空间与内核空间的区别。教学建议：通过对比的方法，讲述标准C程序和驱动程序的联系和区别，并简单阐述设备和文件之间的关系，说明Linux驱动程序采用此种驱动程序结构的好处。1.1设置测试系统1.2HelloWorld模块1.3核心模块与应用程序的对比1.4编译和装载1.5内核符号表1.6初始化和关闭1.7模块参数1.8在用户空间编写驱动程序【重点】：最简单驱动程序的结构及实现过程，内核空间与用户空间的区别，内核符号表，驱动中如何进行参数的配置【难点】：内核符号表，内核空间与用户空间的区别第3章字符设备驱动程序（4学时）397目的与要求：了解一个字符驱动程序的分析设计过程，掌握主次设备号在驱动程序中的作用，掌握简单驱动程序中重要的三种数据结构及其关系，弄清楚驱动程序各个构成部分是如何通过数据结构联系到一起的，掌握驱动程序实现的基本原理。难点与重点：简单驱动程序的分析与设计思路，设备号的作用，数据结构及其之间的关系，驱动程序实现的基本原理。教学建议：通过设备与文件的关系以及文件的常见操作说明驱动程序的基本结构，通过指向函数的指针、fops等讲清楚数据结构之间的关系，通过具体实例的内存映射让学生理解驱动程序的设计实现过程中仍然是以数据（结构）为核心的程序设计，但同时要考虑系统层面实现细节。第一节scull驱动程序的设计（2学时）1.1scull的设计1.2主设备号和次设备号1.3一些重要的数据结构【重点】：简单驱动程序的功能与分析设计，重要的数据结构的构成、关系及相互关系【难点】：如何通过基本的数据结构将驱动程序的各个构成部分联系成一个整体第二节scull驱动程序的实现（2学时）2.1字符设备的注册2.2open和release2.3scull的内存使用2.4read和write【重点】：注册的作用及常见方式、读写的实现方式及注意问题、实例的内存数据的管理【难点】：注册的具体工作和作用，读写过程中的注意问题第4章调试技术（2学时）目的与要求：了解驱动程序设计中常见的调试技术，了解这些调试技术的优点和缺点，掌握简单的调试工具。难点与重点：驱动程序调试与普通程序的调试的难度在于什么地方，各种调试方法的优缺点。教学建议：通过驱动程序的开发环境、过程说明驱动程序和普通程序调试的不同，困难所在；通过各种调试方法的对比说明在不同的时间采用不同调试方法的重要性，通过一个实例说明调试技术如何使用。1.1内核中的调试支持1.2打印调试、查询调试、监视调试1.3调试系统故障1.4调试器和相关工具【重点】：驱动程序的调试方法，各种调试技术【难点】：驱动程序复杂的开发环境下如何选取各种调试技术和方法第5章并发和竞争（2学时）398目的与要求：掌握底层应用通常会涉及到资源冲突的原因和常见解决方法。难点与重点：冲突产生的原因，如何进行并发和竞争，常见的解决方法。教学建议：通过代码实例分析在特定情况下产生什么样的问题，这个问题的实质是什么，在已学到的操作系统中对这个问题是如何解决的，各种解决方法之间的对比和选择的策略。1.1scull的缺陷1.2并发及其管理1.3信号量和互斥体1.4completion1.5自旋锁与锁陷阱1.6除了锁之外的办法【重点】：驱动程序容易忽略的资源在并发下产生的冲突的原因和解决办法【难点】：各种解决方法的不同及选择的策略第6章高级字符驱动程序操作（4学时）目的与要求：掌握如何通过驱动程序向设备发出各种命令，掌握如何在设备因各种原因无法响应时进行处理，掌握如何在驱动程序内部实现消息的传递。难点与重点：读写和控制的关系及实现方式及策略的选择，如何进行阻塞型I/O，具体实现分析。教学建议：通过阐述大量的与设备进行数据交换和仅仅与设备进行命令交互两种方式的特点引入不同的设计思路和方法，通过操作系统中的进程的状态切换的原因说明阻塞型I/O存在的必要性，分析具体实例的设计与实现。第一节scull驱动程序的设计（2学时）1.1ioctl1.2阻塞型I/O【重点】：读写和控制的关系及实现方式及策略的选择、阻塞型I/O实现的方法【难点】：控制和读写策略的选择及阻塞型I/O实现的方法第二节scull驱动程序的实现（2学时）2.1poll和select2.2异步通知2.3定位设备2.4设备文件的访问控制【重点】：设备的异步通知的实现方式，设备如何实现访问控制【难点】：为什么需要异步通知，为什么要实现设备文件的访问控制第7章时间、延迟及延缓操作（2学时）目的与要求：掌握内核级的程序中如何实现时间相关的操作，掌握如何在不满足特定条件下进行时间延迟和延缓操作。399难点与重点：设备中为什么需要时间延迟和延缓操作，如何实现这些功能。教学建议：通过组成原理中外设与CPU的交换方式引入时间延迟和延缓操作的必要性，通过对比普通应用程序中常见的时间操作实例说明在驱动程序中时间操作的实现方式。1.1度量时间差1.2获取当前时间1.3延迟执行1.4内核定时器1.5tasklet1.6工作队列【重点】：如何度量时间差，各种时间延迟和延缓操作的方法及特点【难点】：系统硬件如何实现时间的相关操作，各种时间延迟和延缓操作的选取策略第8章分配内存（2学时）目的与要求：掌握内核驱动程序的内存的特点，掌握内核驱动程序的内核空间分配的方法，掌握用户空间和内核空间数据交换的方法。难点与重点：内核空间与应用空间的概念及区别联系，内核空间分配的方法和实现过程，各种分配函数的不同于选取策略。教学建议：含教学条件及教学方法等1.1kmalloc函数的内幕1.2后备高速缓存1.3get_free_page和相关函数1.4vmalloc及其辅助函数1.5per-CPU变量1.6获取大的缓冲区【重点】：内核空间和用户空间的概念，各种分配函数及方法【难点】：内核空间与用户空间如何进行数据交换，为什么需要特定方式的数据交换第9章与硬件通信（2学时）目的与要求：掌握使用I/O端口与设备进行数据交换的方法难点与重点：I/O的概念、I/O端口和内存，如何使用I/O端口教学建议：通过已学的GPIO的相关操作引入相关概念，通过实例讲解说明I/O端口的具体实现方式。1.1I/O端口和I/O内存1.2使用I/O端口1.3I/O端口示例1.4使用I/O内存【重点】：I/O端口的概念和具体实现400【难点】：I/O端口的概念和具体实现第10章中断处理（2学时）目的与要求：掌握在驱动程序中如何实现中断的处理，掌握在中断过程中如何实现共享和I/O。难点与重点：实际系统中断的具体实现和注意问题。教学建议：简单回顾中断的概念和处理过程，并讲解中断各个部分在驱动中的实现，随后引入一些特殊的注意问题，阐述共享和I/O在中断中的具体实现，通过实例阐述各部分的实现原理。1.1准备并口1.2中断处理例程1.3顶半部和底半部1.4中断共享1.5中断驱动的I/O【重点】：驱动程序中的中断的实现【难点】：驱动程序中中断的具体处理过程的实现第11章内核的数据类型（2学时）目的与要求：掌握在驱动(内核)程序设计中的各种数据类型，了解与普通应用程序数据类型的区别和联系。难点与重点：各种数据类型的定义与实现教学建议：采用对比的方法说明驱动程序的数据类型，并说明各种硬件环境对数据类型的影响。1.1使用标准C语言类型1.2为数据项分配确定的空间大小1.3接口特定的类型1.4其他有关移植性的问题1.5链表【重点】：各种数据类型【难点】：如何保障在不同硬件环境下的可移植性第12章块设备驱动程序（2学时）目的与要求：掌握块设备驱动程序的基本结构，掌握块驱动程序的基本实现过程难点与重点：块设备驱动程序的注册操作等过程教学建议：通过分析数据的不同对驱动程序设计要求不同如何进行处理，通过代码分析具体的实现过程。1.1注册1.2块设备操作1.3请求处理4011.4其他一些细节【重点】：块设备驱动程序的特点及具体实现【难点】：各种处理的细节（二）实验教学（20学时）熟悉本课程中驱动程序的开发原理，掌握字符设备驱动程序和块驱动程序的设计与开发过程，了解其它设备驱动程序的开发过程，完成字符设备和块设备驱动程序的开发，分析、解释实验结果，形成结论并提出建议，达到能进行基于Linux的设备驱动程序的开发的基本能力。Linux驱动的开发需要牢固的硬件基础，并需要对驱动中所涉及的Linux内核知识有良好的掌握，因此课程难度非常大，学生应该多花时间分析代码并尝试进行设计以锻炼嵌入式驱动程序开发的基本技能和方法。序号项目编码737475070100790701008007010081必修实验项目项目名称驱动程序开发环境熟悉简单的字符设备驱动程序块设备驱动程序