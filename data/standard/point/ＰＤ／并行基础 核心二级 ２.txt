多个同时执行的计算。
并行的目标（如吞吐率）ｖｓ并发性（如控制共享资源的访问）。
并行、通信和协调。
协调多个并发计算的程序结构。
同步的需要。
在串行编程中无法发现的编程错误。
数据竞争（共享状态下的同时读与写或者同时写）。
高级竞争（违反了程序意图的交叉行为，不希望发生的非确定性）。
缺乏活性和进展（死锁、互斥等待）
学习成果：
１．区分使用计算资源快速获取解答和有效管理共享资源的不同（交叉引用
ＧＶ／基础概念的学习成果５）。［熟悉］
２．区分多种支持同步操作的程序结构，它们具有交互实现并能互补的优
势。［熟悉］
３．区别数据竞争和高级竞争。［熟悉］