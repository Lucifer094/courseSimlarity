简单的数值算法，如计算一列数字的平均数，求列表的最小、最大值以及
模，近似求一个数的平方根，求最大公约数。
序列及二进制搜索算法。
最坏情况下二次的排序算法（选择排序，插入排序）。
最坏或平均情况下Ｏ（ｎｌｏｇｎ）的排序算法（快速排序，堆排序，归并）。
哈希表，包括避免和解决冲突的策略。
二进制搜索树。
在二进制搜索树上常见的操作，如求最小值、最大值、插入、删除、遍历
树等。
图以及图算法。
图的表示（如邻接表、邻接矩阵）。
深度和广度优先遍历。
１实现基本的数值算法。［运用］
２实现简单的搜索算法，并解释其时间复杂度上的差异。［评估］
３能够实现常见的二次及Ｏ（ＮｌｏｇＮ）的排序算法。［运用］
４说明哈希表的实现，包括避免冲突及解决方案。［熟悉］
５讨论用于排序、搜索以及哈希的主要算法的时间及内存效率。［熟悉］
６讨论除了计算效率之外会影响算法选择的因素，如编程时间、可维护性
和在输入数据中特定应用的模式的使用。［熟悉］
７解释树的平衡性如何影响各种二叉搜索树的操作效率。［熟悉］
８使用基本的图论算法解决问题，包括深度优先和广度优先搜索。［运用］
９展示评估算法，从可能的一系列选项中选择，并提供选择的依据，以及在
特定的上下文中实现该算法的能力。［评估］
