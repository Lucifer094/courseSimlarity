编码实践：技术、套路／模式、构建优质程序的机制（参见ＩＡＳ／防御性编
程、ＳＤＦ／开发方法）。
防御性编码实践。
安全编码实践。
使用异常处理机制，使程序更加健壮、容错。
编码标准。
集成策略。
开发环境：“绿场”对比现有代码库。
变更影响分析。
变更实现。
［选修］
程序中潜在的安全问题。
缓冲区和其他类型的溢出。
竞态条件。
不正确的初始化，包括特权的选择。
检查输入。
假设成功和正确性。
验证的假设。
学习成果：
［核心二级］
１描述技术、编码套路和实现设计的机制，以达到所需的性能，如可靠性、
效率以及健壮性。［熟悉］
２使用异常处理机制构建健壮的代码。［运用］
３描述安全编码和防御性编码实践。［熟悉］
４在一个小型软件项目中选择并使用一种定义的编码标准。［运用］
５对照比较各种整合策略，包括自顶向下、自底向上以及三明治集成。［熟
悉］
软件工程（ＳｏｆｔｗａｒｅＥｎｇｉｎｅｅｒｉｎｇ，ＳＥ）１６９
６描述对某特定项目开发的代码库进行分析和实现变更的过程。［熟悉］
７描述对某大型现有代码库进行分析和实现变更的过程。［熟悉］
［选修］
８重写一个简单的程序，以消除常见的漏洞，如缓冲区溢出、整数溢出以及
竞态条件。［运用］
９写一个软件组件，执行一些非平凡的任务，且可从输入和运行时的错误
中恢复。［运用］