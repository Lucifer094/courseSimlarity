比较和对比解释、编译到本地代码以及编译到可移植的间接表示三种语
言翻译。
语言翻译流程：语法分析、可选的类型检查、翻译、链接、执行。
作为本地代码执行或在虚拟机上执行。
其他选项如动态加载或动态代码生成。
构造核心语言的运行表示如对象（方法表）和一阶函数（闭包）。
内存的运行态布局：堆栈调用、堆调用、静态数据调用。
实现循环调用、递归调用、队尾调用。
内存管理。
手动内存管理：分配、释放和堆内存重用。
自动内存管理：利用可达概念来实现垃圾内存数据的自动回收。
学习成果：
１从特定的语言实现中区分语言的定义（比较和对比编译器与解释器、数
据对象的运行表示符）。［熟悉］
程序设计语言（ＰｒｏｇｒａｍｍｉｎｇＬａｎｇｕａｇｅｓＰＬ）１４７
２区分语法与语义和执行的词法分析。［熟悉］
３概述语言核心构造，如对象和闭包在底层运行时的表示。［熟悉］
４解释程序设计语言如何将内存管理成全局数据、文本、堆栈和堆栈单元
并且解释如递归和内存管理等功能如何映射到内存模型中。［熟悉］
５识别并解决内存泄露和悬挂指针的解引用。［运用］
６讨论内存回收的（包括可达性概念）的好处及局限。［熟悉］