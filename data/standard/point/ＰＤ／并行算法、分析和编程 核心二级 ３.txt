关键路径、Ｗｏｒｋ－Ｓｐａｎ算法以及和Ａｍｄａｈｌ定律的关系（交叉应用ＳＦ／性
能）。
加速比和可扩展性。
天然（不费力的、非常容易的）并行算法。
并行算法的模式（分治法、Ｍａｐ－Ｒｅｄｕｃｅ、主－从等）。
特定的并行算法（如并行合并排序算法）。
［选修］
并行图算法（例如，并行最短路径、并行生成树）（交叉引用ＡＬ／算法策
略／分治法）。
并行矩阵运算。
生产者－消费者和管道算法。
非可扩展并行算法的例子。
学习成果：
［核心２级］
１．定义“关键路径”、“时间总量Ｗｏｒｋ”、“时间跨度Ｓｐａｎ”。［熟悉］
２．学会计算算法运行时间的总量和跨度，并找到并行执行图中的关键路
径。［使用］
３．定义“加速比”和解释算法可扩展性的概念。［熟悉］
４．确定一个并行化程序中的相互独立的任务。［使用］
５．刻画计算负载的相关特性，这些特性决定是否可以并行地执行该负载
［熟悉］
６．实现并行的分而治之（图算法），并测量它相对其串行版本的经验性能。
［使用］
７．使用Ｍａｐ－Ｒｅｄｕｃｅ模式来分解一个问题（例如，计算一个文档中一些词
汇出现的次数）。［使用］