本课程是一门运用计算机思维,分析和研究程序设计中的非数值型数据之间的相互关系及运算的课程，是计算机科学与技术、网络工程、软件工程、物联网工程专业的一门专业基础课程。本课程的目的是讨论数据的表示、存储及处理的理论、方法和技术，并使学生受到必要的程序设计训练。本课程的任务是让学生了解现实生活中的各种数据结构；掌握各种常用数据结构的结构表示、存储表示、处理方法及应用算法设计，学会常用数据分类和数据查找的技术；培养学生的算法设计与分析的能力；增强学生分析和解决工程实际问题的能力。239三、基本要求1.课程支撑能力1）掌握计算机软件基础理论：理解程序运行机制，掌握问题求解、系统设计以及算法与程序设计的基本方法，能合理运用于复杂软件系统的分析、设计与实现。2）具有计算思维能力：能运用计算机科学的思想和方法来求解问题、设计系统和理解人类行为。3）具有算法设计与分析能力：能针对特定需求独立进行算法设计和分析。4)具有程序设计与实现能力：掌握基本的程序设计方法、知识与技术，能对算法用程序实现，并能测试验证算法与程序的正确性。2.课程教学目标1）理解常用数据结构和算法的基本思路、思考方法、适用场合以及算法设计中考虑的各种因素，能运用于非数值型计算问题的建模与算法设计；深入体会经典算法的思想和分析解决问题的方法，能运用于解决其他领域的相关问题。2）能针对基本数据结构与算法方面的特定问题进行分析或推导，建立相应的逻辑结构、物理结构或给出问题的解；能对简单算法进行复杂度分析。3）能针对特定问题需求和给定的数据结构进行算法设计。4）能根据特定问题需求，分析建立计算模型（包括逻辑结构和物理结构）、设计算法和程序，并在设计中综合考虑多种因素，对结果的有效性进行测试验证，提高程序设计能力。3.达成途径1）以计算思维能力培养为导向，注重理解各种数据结构的构造方法、各种算法的思想、并能应用于解决实际问题。2）通过“逻辑结构-存储结构-操作算法实现”的教学过程，使学生理解数据结构及算法的基本知识；采用“基本知识-实例分析-实际应用”的教学思路，注重学生对数据结构课程的整体理解和掌握；引导学生养成从“问题解决者角度”思考的学习方法，深入体会经典算法的思想和分析解决问题的方法，能合理运用于设计复杂计算问题的算法。3）多媒体课件与板书结合。应根据课程不同内容的特点进行选择。例如，在讲授求最小生成树的Prim算法时，以板书为主，引导学生思考Prim算法的思路与实现过程，最终结果在多媒体课件中给出，并结合课堂讨论，以提高学生分析和解决实际问题的能力。四、教学内容、要求及学时分配（一）理论教学(48学时)第一章概述（4学时）【目的与要求】：通过本章学习，学生应了解课程的研究内容，理解数据结构的相关概念，理解算法的含义，熟悉算法描述语言，掌握算法的性能评价指标及评价方法,并能分析常用算法的时间复杂度。对本课的教学内容及知识体系结构有初步的认识。【重点】：数据结构和算法的概念240【难点】：算法的描述形式和评价方法【教学建议】：概述在课程中居于首位，覆盖了课程教学的内核知识。教学中注意把握几点：1）建立“模型”意识。使学生明白表、树、等数据结构是对现实世界的抽象，是描述数据集合中数据之间关系的基本模型，培养抽象描述问题的能力。2）建立研究主线。依照“逻辑结构->物理结构->基本运算->基本算法->算法评价”脉络，研究每种结构的特点，给学生一个清晰的研究主过程，培养学生的组织能力。3）强调若干主要概念的内涵：数据元素、元素集合、元素关系；逻辑结构、物理结构（即存储形式）、基本运算；运算、算法和程序。4）弄清最坏和平均时间复杂度的内涵，使学生能够从低到高列举出常用的表示算法时间复杂度函数的阶，学会选择好的算法。第一节基础概念（2学时）1.1基础概念：数据类型（单值类型、复合类型）1.2数据结构：逻辑结构、存储结构、基本运算1.3抽象数据类型：信息封装、数学模型【重点】：数据结构的概念【难点】：逻辑结构与存储结构的区别与联系第二节算法和算法分析（2学时）2.1算法概念：通用性、有效性、确定性、有限性2.2算法分析：正确性、时间和空间复杂度的大O表示、最坏和平均时间复杂度【重点】：算法的概念，算法的描述形式和评价方法【难点】：评价算法的标准和评价方法，最坏和平均时间复杂度的区分第二章线性表（6学时）【目的与要求】：通过本章学习，学生掌握线性表的逻辑结构及相关概念；掌握线性表的两种存储结构，掌握两种存储方式之间的差异及各自优缺点；掌握顺序表和链表上各种基本运算的实现过程。能够灵活运用顺序表和链表解决实际问题。【难点与重点】：顺序表及链表的存储特点、基本运算及其效率分析。【教学建议】：首先讲清线性表的基本特点、逻辑结构和物理结构，及其基本运算和处理算法，突出几个方面：（1）顺序存储的特点是“结点的逻辑次序与物理次序一致”，链式存储的特点是通过结点之间的“链接”体现逻辑次序，要通过线性表的顺序存储和链式存储的效率对比，反映出“时间和空间”之间的相互关系。241（2）通过弄清“结点、指针和结点的指针域三者之间的关系”，建立起“链”和“链表”的概念，再交代清楚如何通过改变链接关系完成插入和删除。（3）不带附加结点的单链表是最原始的链表，其实现查找、插入、删除运算的程序结构较复杂、易出错；适当地为链表附加“头”结点（或“尾”结点）、或构成循环链表，不仅可以简化程序结构，在某些情况下，还可以提高程序速度。第一节线性表及其顺序存储（3学时）1.1线性表概念：前驱、后继、长度1.2存储方式：动态数组1.3基本运算：查找、插入、删除【重点】：顺序表的存储特点，顺序表基本运算的算法及其效率分析【难点】：顺序表的动态分配第二节线性表的链式存储（3学时）2.1单链表及其基本运算：查找、插入、删除2.2双向链表、循环链表【重点】：链表的存储特点，单链表基本运算的算法及其效率分析【难点】：链表概念的建立，结点、指针和结点的指针域三者之间的关系；不同链表（是否加头、加尾、循环、单向双向等）适用的场合第三章栈和队列（6学时）【目的与要求】：通过本章学习，学生理解栈的定义、特性和运算；掌握栈的顺序存储实现及其性能分析；理解和掌握用栈实现表达式求解的过程。理解队列的定义、特性和运算；理解队列的顺序存储实现及其性能分析；理解循环队列的背景和实现方法。【难点与重点】：栈和队列的概念、特点和应用场合，进栈退栈、进队退队算法。【教学建议】：按照对线性表的插入、删除加以限制的思路，引入栈、队列的内容。栈和队列都属于“过渡性的”辅助结构，实现栈和队列运算的程序中，关键在于如何设置判定“空/满”的条件。第一节栈（3学时）1.1栈存储特点：LIFO原则，栈顶的概念1.2栈存储结构：顺序栈，链式栈1.3表达式求值【重点】：栈的概念、特点和应用场合，进栈退栈算法【难点】：表达式求值算法和实现第二节队列（3学时）2.1队列存储特点：FIFO原则，队头、队尾2.2队列存储结构：顺序队列，链式队列，循环队列2422.3队列的应用【重点】：队列的概念、特点和应用场合，进队退队算法【难点】：循环队列中的处理算法第四章串（2学时）【目的与要求】：通过本章学习，让学生掌握串的相关概念、串的存储特点及基本运算，掌握字符串库函数的使用方法；掌握简单模式匹配算法的实现。【难点与重点】：字符串的运算，字符串库函数的使用方法，简单模式匹配算法的实现。【教学建议】：按照线性表与字符串的联系与区别，引入字符串的存储结构；弄清字符串库函数的使用方法；讲清简单模型匹配算法及其实现过程。第一节串的表示和实现（1学时）1.1串的基本概念：长度，子串/主串，空串1.2串的存储结构1.3字符串运算及其库函数的使用【重点】：字符串概念，字符串运算【难点】：字符串的基本运算第二节简单模式匹配算法（1学时）2.1模式匹配的概念2.2简单模式匹配算法的实现【重点】：模式匹配算法【难点】：模式匹配算法的实现第五章数组（2学时）【目的与要求】：通过本章学习，理解特殊矩阵的顺序压缩存储和地址计算公式；掌握稀疏矩阵的压缩存储及其运算。【难点与重点】：特殊矩阵的压缩顺序存储和地址计算公式；稀疏矩阵的压缩顺序存储和链式存储，压缩顺序存储方式下的矩阵转置算法。【教学建议】：矩阵属于“静态结构”，其元素位置和个数是固定的，不能进行插入和删除。矩阵和图有着直接的关系，学习矩阵的存储方式可为学习图的存储方式打下伏笔。第一节特殊矩阵的压缩存储（1学时）1.1矩阵的顺序存储：行优先/列优先方式，元素地址计算公式1.2特殊矩阵及其压缩存储：三角矩阵，对称矩阵，对角矩阵【重点】：特殊矩阵的压缩顺序存储和地址计算公式【难点】：对称矩阵的压缩存储第二节稀疏矩阵的压缩存储（1学时）2.1稀疏矩阵及其压缩存储：顺序存储（三元组），链式存储（十字链表）243【重点】：稀疏矩阵的顺序存储【难点】：稀疏矩阵的链式存储第六章树和二叉树（8学时）【目的与要求】：通过本章学习，掌握树和二叉树的定义及相关概念，掌握二叉树的数学性质；掌握二叉树的遍历运算并能综合应用；掌握二叉树的构造算法；掌握Huffman树、编码/译码的构造和算法；掌握树和森林的定义及其相互之间的转换。【难点与重点】：二叉树的性质，递归的遍历算法及效率分析，如何利用遍历对二叉树或其结点进行处理；二叉树构造算法；树、森林、二叉树之间的相互转换方法；Huffman算法原理（贪心算法）及其效率分析、算法应用。【教学建议】：树是图的特例，表是树的特例，本课程中的树专指“有根树”，且不考虑边的方向，在此前提下“树用于描述层次关系、分支关系和嵌套关系”，并注意几个方面：（1）二叉树是本章的核心。二叉树的遍历算法是数据访问的基础算法，遍历是一种手段，访问的目的则因问题的不同而不同。先讲清遍历运算的特点和遍历路线，然后强调递归遍历程序与栈之间的关系，使学生对递归程序的执行流程有正确的认识和充分的理解，为更好地应用递归遍历算法解决问题打下基础，培养学生举一反三的能力。（2）借助示例讲透如何把对树或森林的运算转化为对二叉树的运算，灵活运用树、森林和二叉树之间的相互转换关系，引导学生学习发散思维，探寻事物之间的内在联系。（3）Huffman树是树结构的典型应用之一，应重点讲解如何构造Huffman树，如何编码，如何译码。第一节基础概念（2学时）1.1树和二叉树概念：定义和术语，二叉树的性质1.2特殊二叉树：完全二叉树，满二叉树1.3二叉树的存储结构：二叉链表【重点】：二叉树的性质【难点】：二叉链表第二节遍历二叉树（2学时）2.1二叉树遍历算法：前序、中序、后序（或按层）2.2二叉树遍历递归算法：递归算法实现，算法的应用【重点】：二叉树递归遍历算法及其效率分析，遍历算法的应用；二叉树的构造算法【难点】：如何利用遍历对二叉树或其结点进行处理，二叉树构造算法第三节树和森林（2学时）2443.1树和森林的定义3.2树、森林与二叉树之间的转换3.3树的存储：多重链表法、二叉链表法、父指针表示法【重点】：树、森林、二叉树之间的相互转换方法【难点】：树的存储及其与二叉树的关系第四节Huffman树及其应用（2学时）4.1最优二叉树（Huffman树）构造4.2赫夫曼编码（及译码）【重点】：Huffman算法原理、效率分析【难点】：Huffman树的应用第七章图（8学时）【目的与要求】：通过本章学习，掌握图的概念、存储结构（邻接矩阵、邻接表）；掌握或了解图的深度优先遍历算法、广度优先遍历算法的原理、实现和效率分析；了解DAG的基本知识和拓扑排序算法的实现；掌握和理解最小生成树的构造算法和效率分析（Prim算法、Kruskal算法）；掌握最短路径求解算法设计思想（Dijkstra算法、Floyd算法）。【难点与重点】：图的概念（图的种类、路径、回路、生成树），图的邻接表存储方式；深度优先搜索算法的实现和效率分析、算法应用；DAG的判断和应用，拓扑排序算法的实现；Kruskal算法、Prim算法的效率分析和实现方法；Dijkstra算法的实现方法，Floyd算法原理。【教学建议】：图属于复杂的数据结构，与网络结构以及若干最优化问题都要密切联系。教学中，注意几个方面：（1）图的基本概念多而杂，以够用为原则进行介绍。图的存储方式分为顶点集的存储方式和边集的存储方式，重点在于边集的存储方式，而边集以邻接表方式为主。邻接表等同于邻接矩阵的行链表组。（2）深度优先搜索是对二叉树的先序遍历的推广，广度优先搜索是对二叉树的按层遍历的推广。深度优先搜索算法的实现过程中，循环体中包含递归调用，这种既递归又循环的程序结构，比二叉树递归遍历程序中的并列递归调用更难理解，要用具体示例讲清楚算法中循环和递归的关系。深度优先搜索属于基本运算，有多种应用（如求生成树、连通分量，判断有向图是否DAG等），只要讲清楚几个应用的原理即可。宽度优先搜索的应用不如深度优先搜索广泛，对其教学的要求可以弱化些。（3）DAG是一种重要的图结构，很多实用的有向图都要求无回路，拓扑排序和关键路径是DAG的两个重要应用。245（4）最小生成树和最短路径涉及4个经典算法。Kruskal算法和Prim算法的本质是贪心算法，Kruskal算法采用子树归并的思想，Prim算法采用子树延伸的思想，要重点讲清楚两个算法确定和选择“当前最短边”的方法和原则。Dijkstra算法也属贪心算法、也用到子树延伸，但因为其目标不同，得到的结果树也完全不同；Floyd算法重在讲清楚动态规划原理，要点是如何表示路径（便于路径相接）。第一节图的存储结构（1学时）1.1图的概念：定义，术语，种类，生成树1.2图的存储结构：邻接矩阵，邻接表【重点】：图的概念（图的种类、路径、回路、生成树），图的邻接表存储方式【难点】：图的链式存储（邻接表）第二节图的遍历（2学时）2.1深度优先遍历2.2广度优先遍历【重点】：深度优先遍历算法的实现和效率分析【难点】：深度优先遍历算法的应用第三节生成树（2学时）3.1图的连通性概念：连通分量、强连通分量、最小生成树3.2Prim算法的实现和效率分析3.3Kruskal算法思想和效率分析【重点】：Prim算法的实现和效率分析，Kruskal算法思想和效率分析【难点】：Kruskal算法的效率分析和实现方法第四节有向无环图（1学时）4.1DAG的判断和应用4.2拓扑排序算法4.3关键路径【重点】：拓扑排序算法的实现【难点】：关键路径第五节最短路径（2学时）5.1从某个源点到其余各顶点的最短路径：Dijkstra算法5.2每一对顶点之间的最短路径：Floyd算法【重点】：Dijkstra算法设计思想【难点】：Floyd算法原理第八章查找（6学时）【目的与要求】：通过本章学习，让学生掌握查找的基本概念，掌握顺序查找、折半查找算法及性能分析；掌握二叉排序树的查找、插入算法；理解平衡二246叉树原理；掌握散列表基本概念（散列函数，冲突处理），掌握散列表的构造、查找算法。【难点与重点】：折半查找算法及效率分析；二叉排序树的查找、插入、删除算法和效率分析；平衡二叉树原理及旋转方法；散列函数的构造方法，用开放地址法解决冲突、探测序列的选择，散列表效率分析的方法、【教学建议】：查找算法是应用最广泛的一类基础算法，教学中应突出几个方面：（1）折半查找只适合于顺序存储的有序表。判定树模型为分析折半查找算法的时间复杂度提供了方便。（2）讲授二叉排序树时，要强调其中序有序性，围绕如何保持中序的有序性，研究查找、插入和删除算法以及时间复杂性；平衡二叉树是平衡的二叉排序树，用旋转方法维持树的平衡，也就是能将高度控制在O(logn)范围之内，是理想的查找结构，关键在于何种情况下需要进行旋转和怎样旋转，要多举例说明各种旋转方式，便于学生理解。（3）散列表是一种高效的查找表。保证查找效率的关键有两点：一是如何设计散列函数，减少冲突；二是如何解决散列冲突。简要介绍常用散列函数的特点，使学生能够根据数据的特征适用合适的散列函数。在特殊情况下，可能需要综合运用多种方法拼凑散列函数。在解决冲突的两种方法中，链接法将相互冲突的元素构成一个链表，开放地址法则是当发生冲突的时候，使用探测的方式在散列表中寻找下一个合适的位置。讲授中，要注意比较各种探测方式的特点，强调这些相互冲突的元素之间实际上也构成了一个“隐式”的冲突链表，当冲突发生严重时，散列效率会严重退化。第一节静态查找表（2学时）1.1查找的基本概念：查找长度，平均查找长度1.2查找方法：顺序查找，折半查找1.3分块查找，索引表【重点】：折半查找算法及效率分析【难点】：分块查找第二节动态查找表（2学时）2.1二叉排序树：二叉排序树的查找、插入、删除算法2.2平衡二叉树：平衡二叉树原理及旋转方法【重点】：二叉排序树的查找、插入算法【难点】：二叉排序树的效率分析和删除算法第三节散列表（2学时）3.1散列表基本概念：散列函数，冲突处理3.2散列表的构造、查找算法247【重点】：散列函数的构造方法，开放地址解决冲突，探测序列的选择【难点】：散列表效率分析的方法第九章内部排序（6学时）【目的与要求】：通过本章学习，让学生掌握排序的基本概念；掌握插入排序、交换排序、选择排序、归并排序等排序算法的特性、性能对比和适用场合。【难点与重点】：排序方法的特性，各排序算法的性能对比和适用场合；简单插入排序算法，Shell排序算法及其增量序列选择；冒泡排序算法的特征，快速排序的基本原理、划分方法和效率分析；堆排序算法、归并排序算法的实现方法和效率分析。教学建议：对于内排序，要特别关注各种排序算法的核心思想，时间和空间复杂性以及“稳定性”，并注意几个方面：（1）简单插入排序、冒泡排序和简单选择排序都属于“简单直观”的排序方法，这三个算法共同之处是，在排序过程中，将数据划分为两段：无序段和有序段，反复按照指定规则在无序段中找出一个元素移入有序段，当无序段的长度变为零，就完成了排序工作。不同之处在于，简单插入排序是将无序段的首元素，移到有序段中（并保持有序）；冒泡排序是通过相邻元素比较和交换，延长有序段的长度；而简单选择排序，是在整个无序段中找最小（或最大）元素，将其接到有序段上。强调三者的共性和个性，才能避免学生混淆这三个算法的主体思想。（2）Shell排序算法中，注意讲清楚增量序列、子序列、子序列有序、子序列的定位方式，以及如何对子序列按插入法进行排序。（3）快速排序算法属于递归的分治法。重点讲清楚如何一个划分段划分成两段（即一次划分），以及划分元素（即枢轴值）的选取方法对排序效率的重要影响，并通过分析算法的时间复杂性进一步理解为什么数据排列得越随机，算法的效率越高。（4）递归的归并排序算法也属于递归的分治法。重点讲清楚两路归并的原理（如何将两个有序段合并成一个有序段），递归终止的条件，以及排序效率。（5）基数排序是对字符串（或数字串）进行排序的，其关键之处：一是“基数”的概念，基数和字符串（或数字串）有序性之间的关系；二是为什么选择链式队结构进行数据的分组和收集；三是分析算法的时间复杂性。（6）对比掌握各种排序算法的时间复杂性、空间复杂性和稳定性，并能根据不同的情况，选用最合适的排序算法。第一节插入排序（2学时）1.1排序概述1.2直接插入排序1.3Shell排序248【重点】：直接插入排序原理，Shell排序算法【难点】：Shell排序算法增量序列选择第二节交换排序（1学时）2.1冒泡排序2.2快速排序【重点】：冒泡排序算法的特征，快速排序的基本原理、划分方法【难点】：快速排序算法效率分析第三节选择排序（1学时）3.1简单选择排序3.2堆排序【重点】：堆排序算法的实现方法和性能分析【难点】：堆排序算法效率分析第四节归并排序、基数排序（2学时）3.1归并排序：二路归并排序3.2基数排序：桶，链式基数排序3.3各种内排序方法的比较讨论【重点】：归并排序算法的实现方法和性能分析【难点】：基数排序（二）实验教学（16学时）目的和要求：熟悉本课程相关的研究方法，掌握本课程的数据表示方式及基本运算方法。根据实验的要求，完成各有关问题的求解算法，并估计可能出现的错误；为了能对实验中的算法和相关程序的有关性能进行必要的测试，需要事先准备好必要的数据来运行和测试程序，并且数据的类型和规模应当达到一定的要求，以便能更多地检测到可能存在的问题。实验记录应作为实验报告的一部分；实验后要及时总结，写出实验报告，并附所打印的问题解答、程序清单，所输入的数据及相应的运行结果。实验报告是培养学生表达问题求解的基本能力，并且也是培养良好治学态度的必要环境。4、必修实验项目序号项目编码项目名称200701021321070102002207010202顺序表的建立和基本操作链表的建立和基本运算栈的建立及应用2307010203队列的建立及应用2407010218二叉树的构造和遍历24925070102062607010207图的建立和遍历数据查找算法2707010208内排序5、选修实验项目序号项目编码项目名称5678